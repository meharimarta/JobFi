package com.primed.jobfi;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.util.Log;
import java.util.ArrayList;
import java.util.List;

public class User {

    private String name;
    private String email;
    private String experience;
    private String salary;
    private String yearOfGraduation;
    private String token;
    private String fieldOfStudy;
    private int userId;
    
    private Context context;
    private DatabaseHelper dbHelper;
    private SQLiteDatabase database;
    private static final String TAG = "####User";

    public User(Context ctx) {
        this.context = ctx;
        dbHelper = new DatabaseHelper(context);
        database = dbHelper.getWritableDatabase();
        loadUserData();
    }

    private void loadUserData() {
        Cursor cursor = database.query(DatabaseHelper.TABLE_USER, null, null, null, null, null, null);
        if (cursor != null && cursor.moveToFirst()) {
            userId = cursor.getInt(cursor.getColumnIndexOrThrow(DatabaseHelper.COLUMN_ID));
            name = cursor.getString(cursor.getColumnIndexOrThrow(DatabaseHelper.COLUMN_NAME));
            email = cursor.getString(cursor.getColumnIndexOrThrow(DatabaseHelper.COLUMN_EMAIL));
            experience = cursor.getString(cursor.getColumnIndexOrThrow(DatabaseHelper.COLUMN_EXPERIENCE));
            salary = cursor.getString(cursor.getColumnIndexOrThrow(DatabaseHelper.COLUMN_SALARY));
            yearOfGraduation = cursor.getString(cursor.getColumnIndexOrThrow(DatabaseHelper.COLUMN_YEAR_OF_GRADUATION));
            token = cursor.getString(cursor.getColumnIndexOrThrow(DatabaseHelper.COLUMN_TOKEN));
            cursor.close();
        } else {
            Log.d(TAG, "No user data found.");
        }
    }

    public boolean createUser(String name, String email, String experience, String salary, String yearOfGraduation, String token, String fieldOfStudy) {
        ContentValues values = new ContentValues();
        values.put(DatabaseHelper.COLUMN_NAME, name);
        values.put(DatabaseHelper.COLUMN_EMAIL, email);
        values.put(DatabaseHelper.COLUMN_EXPERIENCE, experience);
        values.put(DatabaseHelper.COLUMN_SALARY, salary);
        values.put(DatabaseHelper.COLUMN_YEAR_OF_GRADUATION, yearOfGraduation);
        values.put(DatabaseHelper.COLUMN_TOKEN, token);

        long result = database.insert(DatabaseHelper.TABLE_USER, null, values);
        return result != -1;
    }
    // Insert a new field of study
    public boolean addFieldOfStudy(int majorId, String major) {
        ContentValues values = new ContentValues();
        values.put(DatabaseHelper.COLUMN_MAJOR_ID, majorId);
        values.put(DatabaseHelper.COLUMN_MAJOR, major);

        long result = database.insert(DatabaseHelper.TABLE_FIELD_OF_STUDY, null, values);
        return result != -1;
    }

    // Retrieve all fields of study
    public List<String> getAllFieldsOfStudy() {
        List<String> fieldOfStudyList = new ArrayList<>();
        Cursor cursor = database.query(DatabaseHelper.TABLE_FIELD_OF_STUDY, null, null, null, null, null, null);

        if (cursor != null && cursor.moveToFirst()) {
            do {
                int majorId = cursor.getInt(cursor.getColumnIndexOrThrow(DatabaseHelper.COLUMN_MAJOR_ID));
                String major = cursor.getString(cursor.getColumnIndexOrThrow(DatabaseHelper.COLUMN_MAJOR));
                fieldOfStudyList.add("ID: " + majorId + " - Major: " + major);
            } while (cursor.moveToNext());
            cursor.close();
        } else {
            Log.d(TAG, "No field of study data found.");
        }
        return fieldOfStudyList;
    }
    public String getName() {
        return name;
    }

    public String getEmail() {
        return email;
    }
    
    public String getToken() {
        return token;
    }
    public String getExperience() {
        return experience;
    }
    
    public String getSalary() {
        return salary;
    }
    
    public String getYearOfGraduation() {
        return yearOfGraduation;
    }
    
    public int getId() {
        return userId;
    }
    
    public String getCurrentJob() 
    {
        return "Coder";
    }
    // Add similar getter methods for other fields if needed
}

JSONObject data = fm.getFileAsJsonObject();
        try
        {
            JSONObject resData = new JSONObject(data.getString("responseData"));
            JSONObject userData = new JSONObject(resData.getString("user"));
            JSONObject infoData = new JSONObject(resData.getString("info"));
            Log.d(TAG, resData.toString());
            Log.d(TAG, userData.toString());
            Log.d(TAG, infoData.toString());
            
            token = resData.getString("token");
            email = userData.getString("email");
            name = userData.getString("name");
            userId = userData.getInt("id");
            experiance = infoData.getString("experiance");
            fieldOfStudy = new JSONArray(resData.getString("field_of_studies"));
            yearOfGraduation = infoData.getString("year_of_graduation");
            salary = infoData.getString("salary");
            
            
        }
        catch (JSONException e)
        { e.printStackTrace();}
